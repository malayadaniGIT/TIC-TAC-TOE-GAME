# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?






import { useState } from 'react'import './App.css'import Board from './Components/Board/Board'import ScoreBoard from './Components/scoreBoard/ScoreBoard'function App() {const [board, setBoard] = useState(Array(9).fill())const [xisPlaying,setXIsPlaying]=useState(true)const [xScore,setXScore] =useState(0)const [oScore,setOScore] =useState(0)const [gameover,setGameOver]=useState(false)const WIN_CONDITIONS =[[0,1,2],[3,4,5],[6,7,8],[0,3,6],[1,4,7],[2,5,8],[0,4,8],[2,4,6],]const  handleBoxClick=(BoxID)=>{const updatedBoard=board.map((value,id)=>{if(id === BoxID){return xisPlaying ===  true ? "X" : "O"}else{return value}})console.log("updated",updatedBoard);setBoard(updatedBoard);setXIsPlaying((prevXIsPlaying) => !prevXIsPlaying);const winner= checkWinner(updatedBoard)if(winner){if(winner == "X"){setXScore(xScore+1)setGameOver(true)console.log(xScore);}else{setOScore(oScore+1)setGameOver(true)}}}const checkWinner=(updatedBoard)=>{for(let i=0;i<WIN_CONDITIONS.length;i++){const [x,y,z]=WIN_CONDITIONS[i] //[1,2,3]if(updatedBoard[x] &&updatedBoard[x] === updatedBoard[y] &&updatedBoard[y] === updatedBoard[z]){console.log("winner");return updatedBoard[x]}}}const reset=()=>{setGameOver(false)setBoard(Array(9).fill())setOScore(0)setXScore(0)}const startagain=()=>{// setGameOver(false)setBoard(Array(9).fill())}return (<div className="App"><ScoreBoard xScore={xScore} oScore={oScore}/><Board board={board} onClick={gameover === true ? reset : handleBoxClick}/><div className='btns'><div className='btnbox1'><button className='btn' onClick={startagain}>start again</button><button className='btn' onClick={reset}>Reset</button></div><div className=' btnbox2'><button className='btn overbtn' >GameOver</button></div></div></div>)}export default App